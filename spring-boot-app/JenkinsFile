pipeline {
    agent any
  
    environment {
        WORKSPACE = "${env.WORKSPACE}"
        AWS_DEFAULT_REGION = "us-east-1"
    }

    tools {
        terraform 'terraform'
        maven 'localMaven'
        jdk 'localJdk'
        docker 'docker'
    }

    stages {
        stage('Git Checkout') {
            steps {
                echo 'Cloning the application code...'
                git branch: 'main', url: 'https://github.com/Dappyplay4u/springboot.git'
            }
        }

        stage('Create EKS Cluster') {
            steps {
                script {
                    dir('terraform/eks-cluster-ec2') {
                        sh 'terraform init'
                        sh 'terraform fmt'
                        sh 'terraform validate'
                        sh 'terraform plan -out=tfplan'
                        stash includes: 'tfplan', name: 'terraform-plan'
                    }
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'terraform/eks-cluster-ec2/tfplan', onlyIfSuccessful: true
                }
            }
        }

        stage('Approval') {
            steps {
                input "Please review the Terraform plan and click 'Proceed' to apply it"
            }
        }

        stage('Apply Terraform') {
            steps {
                script {
                    dir('terraform/eks-cluster-ec2') {
                        unstash 'terraform-plan'
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Build and Test') {
            steps {
                sh 'cd spring-boot-app && mvn -U clean package'
            }
        }
        
        stage('Unit Test') {
            steps {
                sh 'cd spring-boot-app && mvn test'
            }
        }
        
        stage('Integration Test') {
            steps {
                sh 'cd spring-boot-app && mvn verify -DskipUnitTests'
            }
        }
        
        stage('Checkstyle Code Analysis') {
            steps {
                sh 'cd spring-boot-app && mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }
        
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.238.3.76:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage("Docker Build & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        dir('spring-boot-app') {
                            sh 'docker build -t minecraft .'
                            sh 'docker tag minecraft dappyplay4u/minecraft:latest'
                            sh 'docker push dappyplay4u/minecraft:latest'
                        }
                    }
                }
            }
        }

        stage('Deploy to Container') {
            steps {
                sh 'docker run -d -p 8090:8085 dappyplay4u/minecraft:latest'
            }
        }

        stage('Install Docker') {
            steps {
                sh '''
                    sudo yum install docker -y
                    sudo systemctl start docker
                    sudo systemctl enable docker
                    sudo usermod -a -G docker jenkins
                '''
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                awsAccountId = '568170370118'
                region = 'us-east-1'
                repositoryName = 'minecraft'
                dockerImageTag = "${BUILD_NUMBER}"
                ecrRegistry = "${awsAccountId}.dkr.ecr.${region}.amazonaws.com"
            }
            steps {
                script {
                    sh "cd spring-boot-app && docker build -t ${repositoryName}:${dockerImageTag} ."
                    sh "aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecrRegistry}"
                    sh "docker tag ${repositoryName}:${dockerImageTag} ${ecrRegistry}/${repositoryName}:${dockerImageTag}"
                    sh "docker push ${ecrRegistry}/${repositoryName}:${dockerImageTag}"
                    sh "docker rmi ${ecrRegistry}/${repositoryName}:${dockerImageTag}"
                    sh "docker rmi ${repositoryName}:${dockerImageTag}"
                }
            }
        }

        stage('Install kubectl') {
            steps {
                sh '''
                    KUBECTL_VERSION="v1.24.0"
                    curl -LO "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                    chmod +x kubectl
                    sudo mv kubectl /usr/local/bin/
                '''
            }
        }

        stage("Deploy to EKS"){
        environment {
        region = 'us-east-1'
        clusterName = 'Minecraft-eks-cluster'
      }       
        steps {  
          script {
            sh "sed -i 's/replaceImageTag/${BUILD_NUMBER}/g' k8s-manifests/deployment.yaml"
            dir('k8s-manifests'){      
            sh "aws eks update-kubeconfig --name ${clusterName} --region ${region}"
            sh "kubectl apply -f ."
      }
        }
      }
    }

    stage('approve destroy for terraform') {
            steps {
                input "Do you want to Proceed to destroy terraform resources"
            }
        }
    stage('destroy') {
        steps {
            script{
              dir ('terraform/eks-cluster-ec2') {
              unstash 'terraform-plan'
              sh 'terraform destroy -auto-approve'
              }
           }
            }
        }


  }
}



