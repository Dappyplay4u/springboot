Minecraft Server Deployment Pipeline Presentation
Introduction
Today, I'm thrilled to present our deployment pipeline for the Minecraft server using a two-tier architecture. This pipeline automates the deployment process, ensuring efficiency, reliability, and consistency in our server setup.

Pipeline Overview
Our pipeline is divided into several stages, each handling a specific aspect of the deployment process. Let's dive into each stage:

Git Checkout:

Clones the application code from our GitHub repository.
Create EKS Cluster:

Utilizes Terraform to provision an Amazon EKS cluster with EC2 nodes.
Validates the Terraform configuration and creates a plan for the cluster setup.
Approval:

Requires manual approval before proceeding to apply the Terraform plan.
Apply:

Applies the Terraform plan to create the EKS cluster.
Build and Test:

Builds the project and creates a JAR file using Maven.
Unit Test:

Executes unit tests for the application.
Integration Test:

Runs integration tests for the application.
Checkstyle Code Analysis:

Performs code style checks using Checkstyle.
Static Code Analysis:

Conducts static code analysis using SonarQube.
Upload Artifact to Nexus:

Uploads the application artifact to Nexus repository after Maven deployment.
Docker Build & Push to Dockerhub:

Builds the Docker image for the Minecraft server and pushes it to Dockerhub.
Deploy to Container:

Deploys the Docker image to a container, exposing it on port 8095.
Install kubectl:

Installs the Kubernetes command-line tool, kubectl.
Deploy to EKS:

Updates the Kubernetes configuration and applies the Kubernetes manifests for deployment on EKS.
Approve Destroy for Terraform:

Requires manual approval before proceeding to destroy Terraform resources.
Destroy:

Destroys the provisioned EKS cluster and associated resources using Terraform.
Conclusion
Our deployment pipeline automates the entire process of setting up and deploying the Minecraft server, ensuring scalability, reliability, and consistency in our infrastructure. With this pipeline in place, we can easily manage our Minecraft server environment and focus on delivering an exceptional gaming experience to our users.